#!/bin/bash
#	docker-search  0.17.41  2019-08-11T09:00:00.557122-05:00 (CDT)  https://github.com/BradleyA/Search-docker-registry-v2-script.2.0.git  uadmin  two.cptx86.com 0.16  
#	   addition minor chamges 
#	docker-search  0.16.40  2019-02-22T11:03:38.277789-06:00 (CST)  https://github.com/BradleyA/Search-docker-registry-v2-script.2.0.git  uadmin  two.cptx86.com 0.15  
#	   begin updating script to production 5 
### docker-search
###	View private registry v2,
#		if PERSISTENT REGISTRY_ROOTDIRECTORY is mounted on your system
#	Need to test when future release support
#		Configurable trust servers for users running a private registry
###
#       Copyright (c) 2019 Bradley Allen
#       License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
#   production standard 5
#       Order of precedence: environment variable, default code
if [ "${DEBUG}" == "" ] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
#	set -x
#	set -v
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
###
display_help() {
echo -e "\n${NORMAL}${0} - view private local repository images"
echo -e "\nUSAGE\n   ${0} [XX | YY | ZZ]"
echo    "   ${0} [--file <PATH>/<FILE_NAME> | -f <PATH>/<FILE_NAME>]"
echo    "   ${0} [--help | -help | help | -h | h | -?]"
echo    "   ${0} [--version | -version | -v]"
echo -e "\nDESCRIPTION"
#       Displaying help DESCRIPTION in English en_US.UTF-8
echo    "<your help goes here>" 
echo    ">>> NEED TO COMPLETE THIS SOON, ONCE I KNOW HOW IT IS GOING TO WORK :-) <<<"
echo -e "\n<<Paragraph two>>"
#       Displaying help DESCRIPTION in French fr_CA.UTF-8, fr_FR.UTF-8, fr_CH.UTF-8
if [ "${LANG}" == "fr_CA.UTF-8" ] || [ "${LANG}" == "fr_FR.UTF-8" ] || [ "${LANG}" == "fr_CH.UTF-8" ] ; then
	echo -e "\n--> ${LANG}"
	echo    "<votre aide va ici>" # your help goes here
	echo    "Souhaitez-vous traduire la section description?" # Do you want to translate the description section?
elif ! [ "${LANG}" == "en_US.UTF-8" ] ; then
        get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[WARN]${NORMAL}  Your language, ${LANG}, is not supported.  Would you like to translate the description section?" 1>&2
fi
echo -e "\nEnvironment Variables"
echo    "If using the bash shell, enter; 'export DEBUG=1' on the command line to set"
echo    "the DEBUG environment variable to '1' (0 = debug off, 1 = debug on).  Use the"
echo    "command, 'unset DEBUG' to remove the exported information from the DEBUG"
echo    "environment variable.  You are on your own defining environment variables if"
echo    "you are using other shells."
echo    "   DEBUG       (default '0')"
echo -e "\n   <<your environment variables information goes here>>"
echo -e "\nOPTIONS\n   -f, --file\n      path and file on system '<path>/<file_name>'"
echo -e "\nOPTIONS\n   Option one - description"
echo    "   XX       xxx xxxxxxx xxx"
echo    "   YY       xxx xxxxx xxx "
echo    "   zz       xx xxxxxxx xx"
echo -e "\nDOCUMENTATION\n   https://github.com/BradleyA/   <<URL to online repository README>>"
echo -e "\nEXAMPLES\n   ${BOLD}${0} <<code example goes here>>${NORMAL}\n\n   <<your code examples description goes here>>\n"
}

#	Date and time function ISO 8601
get_date_stamp() {
DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
TEMP=$(date +%Z)
DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#	Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#	Version
SCRIPT_NAME=$(head -2 "${0}" | awk {'printf $2'})
SCRIPT_VERSION=$(head -2 "${0}" | awk {'printf $3'})

#	UID and GID
USER_ID=$(id -u)
GROUP_ID=$(id -g)

#       Added line because USER is not defined in crobtab jobs
if ! [ "${USER}" == "${LOGNAME}" ] ; then  USER=${LOGNAME} ; fi
if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Setting USER to support crobtab...  USER >${USER}<  LOGNAME >${LOGNAME}<" 1>&2 ; fi

#	Default help and version arguments
if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "h" ] || [ "$1" == "-?" ] ; then
	display_help | more
	exit 0
fi
if [ "$1" == "--version" ] || [ "$1" == "-version" ] || [ "$1" == "version" ] || [ "$1" == "-v" ] ; then
	echo "${SCRIPT_NAME} ${SCRIPT_VERSION}"
	exit 0
fi

#	INFO
get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[INFO]${NORMAL}  Started..." 1>&2

#	DEBUG
if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Name_of_command >${0}< Name_of_arg1 >${1}< Name_of_arg2 >${2}< Name_of_arg3 >${3}<  Version of bash ${BASH_VERSION}" 1>&2 ; fi

# >>>	#       Order of precedence: CLI argument, environment variable, default code
# >>>	if [ $# -ge  1 ]  ; then CLUSTER=${1} ; elif [ "${CLUSTER}" == "" ] ; then CLUSTER="us-tx-cluster-1/" ; fi
# >>>	#       Order of precedence: CLI argument, default code
# >>>	ADMUSER=${2:-${USER}}
# >>>	#       Order of precedence: CLI argument, environment variable, default code
# >>>	if [ $# -ge  3 ]  ; then DATA_DIR=${3} ; elif [ "${DATA_DIR}" == "" ] ; then DATA_DIR="/usr/local/data/" ; fi
# >>>	if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Variable... CLUSTER >${CLUSTER}< ADMUSER >${ADMUSER}< DATA_DIR >${DATA_DIR}<" 1>&2 ; fi
# >>>	
#-->>>>>>>>>>>>>>>>>>>>>>>

###	Enter the full path to your dev (development) private registry v2 
#	This is the default and the only registry that is required to be defined in this script
#	If the environment variable is defined it will over ride the setting of this script variable.
#
if [ -z ${REGISTRY_ROOTDIRECTORY} ]
then
#    REGISTRY_ROOTDIRECTORY="/mnt/three/docker-registry/registry-data"
    REGISTRY_ROOTDIRECTORY="/usr/local/docker-registry-$REGISTRY_PORT/"
#	Need to look at this directory structure
#		/usr/local/docker-registry-17313/docker/registry/v2/repositories/{dev1,dev2,dev3,docker,x prod,prom,svt1}
#		docker-registry-17313/docker/registry/v2/repositories
fi
#
#####	Change the registry flag name to the full path of your teams private registries if more than one registry is used.
#	Each team requires control over the image while it is moving through the teams process.
#
#	dev (development)
DEV_REGISTRY="dev"
#	dev1 (development team 1)
DEV1_REGISTRY="dev1"
#	dev2 (development team 2)
DEV2_REGISTRY="dev2"
#	dev3 (development team 3)
DEV3_REGISTRY="dev3"
#	fvt (function verification test)
FVT_REGISTRY="fvt"
#	gvt (global verification test)
GVT_REGISTRY="gvt"
#	svt (security verification test)
SVT_REGISTRY="svt"
#	plisp (performance/load/integration/stress/platform test)
PLISP_REGISTRY="plisp"
#	prom (promote release staging)
PROM_REGISTRY="prom"
#	prod (production)
PROD_REGISTRY="prod"
#	roll (roll back staging)
ROLL_REGISTRY="roll"
#	hist (historic)
HIST_REGISTRY="hist"
#	v2 (/var/lib/registry)	This is the docker registry default location. 
v2_REGISTRY="/var/lib/registry"
#
#####	Parse command flags
#
while [[ $# > 0 ]]
do
key="$1"
case $key in
    -r|--registry)
    REGISTRY_NAME="$2"
    shift # past argument
    ;;
    -h|--help|-\?)
    echo "Usage: docker-search [OPTIONS] [IMAGE_NAME]"
    echo -e "\nSearch Private Docker Registry v2 for images\n"
    echo "  -h, --help=false      Print usage"
    echo "  -r, --registry dev    dev (development)  default"
    echo "                 dev1   dev1 (development team 1)"
    echo "                 dev2   dev2 (development team 2)"
    echo "                 dev3   dev3 (development team 3)"
    echo "                        fvt (function verification test)"
    echo "                        gvt (global verification test)"
    echo "                        svt (security verification test)"
    echo "                        plisp (performance/load/integration/stress/platform test)"
    echo "                        prom (promote release staging) "
    echo "                        prod (production)"
    echo "                        roll (roll back staging)"
    echo "                        hist (historic)"
    echo "                        v2 (/var/lib/registry)"
    exit 0
    ;;
    -*)
    echo "Flag provided but not defined: $1"
    echo "See 'docker-search --help'."
    exit 0
    ;;
    *)
    IMAGE_NAME=$1
    ;;
esac
shift
done
#
#####	Set REGISTRY_ROOTDIRECTORY according to flag entered on command line.
#
case $REGISTRY_NAME in
    dev)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${DEV_REGISTRY};;
    dev1)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${DEV1_REGISTRY};;
    dev2)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${DEV2_REGISTRY};;
    dev3)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${DEV3_REGISTRY};;
    fvt)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${FVT_REGISTRY};;
    gvt)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${GVT_REGISTRY};;
    svt)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${SVT_REGISTRY};;
    plisp)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${PLISP_REGISTRY};;
    prom)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${PROM_REGISTRY};;
    prod)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${PROD_REGISTRY};;
    roll)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${ROLL_REGISTRY};;
    hist)	REGISTRY_ROOTDIRECTORY=${REGISTRY_ROOTDIRECTORY}docker/registry/v2/repositories/${HIST_REGISTRY};;
    v2)		REGISTRY_ROOTDIRECTORY="/var/lib/registry";;
esac
#
#####	Print debug information
#
echo -e "\nREGISTRY_ROOTDIRECTORY = ${REGISTRY_ROOTDIRECTORY}"
echo REGISTRY_NAME  = "${REGISTRY_NAME}"
echo IMAGE_NAME     = "${IMAGE_NAME}"
#
#####	Test if REGISTRY_ROOTDIRECTORY is a directory
#
if [ ! -d "${REGISTRY_ROOTDIRECTORY}" ]
then
    echo "WARNING: ${REGISTRY_ROOTDIRECTORY} is not a directory."
    exit 0
fi
#
#####	May need to tweak as registry releases change file name format
#
find ${REGISTRY_ROOTDIRECTORY} -print | \
	grep 'v2/repositories' | \
	grep 'current' | \
	grep -v 'link' | \
	sed -e 's/\/_manifests\/tags\//:/' | \
	sed -e 's/\/current//' | \
	sed -e 's/^.*repositories\//	/' | \
	sort > /tmp/a1
if [ -n "${IMAGE_NAME}" ]
then
    grep ${IMAGE_NAME} /tmp/a1
else
    cat /tmp/a1
fi
wc -l /tmp/a1 > /tmp/a2
echo "Number of images:	`cat /tmp/a2 | awk {'print $1'}`"
echo "Disk space used:	`du -hs ${REGISTRY_ROOTDIRECTORY}`"
rm /tmp/a1 /tmp/a2
